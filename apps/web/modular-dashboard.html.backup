<!DOCTYPE html>
<html lang="de" data-theme="dark">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="config/api-config.js"></script>
  <script src="icons-helper.js"></script>
  <title>ðŸŒŒ Toobix Modular Dashboard - Next Generation</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root[data-theme="dark"] {
      --bg-primary: #0a0e1a;
      --bg-secondary: #1a1f3a;
      --bg-tertiary: #2a2f4a;
      --text-primary: #e0e6ed;
      --text-secondary: #a0aec0;
      --accent-primary: #667eea;
      --accent-secondary: #764ba2;
      --accent-success: #4ade80;
      --accent-warning: #fbbf24;
      --accent-error: #f87171;
      --border-color: rgba(255, 255, 255, 0.1);
      --shadow: rgba(0, 0, 0, 0.3);
      --glass: rgba(255, 255, 255, 0.05);
      --glass-hover: rgba(255, 255, 255, 0.1);
    }

    :root[data-theme="light"] {
      --bg-primary: #f8fafc;
      --bg-secondary: #ffffff;
      --bg-tertiary: #e2e8f0;
      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --accent-primary: #3b82f6;
      --accent-secondary: #8b5cf6;
      --accent-success: #22c55e;
      --accent-warning: #f59e0b;
      --accent-error: #ef4444;
      --border-color: rgba(0, 0, 0, 0.1);
      --shadow: rgba(0, 0, 0, 0.1);
      --glass: rgba(0, 0, 0, 0.03);
      --glass-hover: rgba(0, 0, 0, 0.05);
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      overflow-x: hidden;
    }

    /* Cosmic Background */
    .cosmic-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      pointer-events: none;
      overflow: hidden;
    }

    .star {
      position: absolute;
      width: 2px;
      height: 2px;
      background: white;
      border-radius: 50%;
      animation: twinkle 3s infinite;
    }

    @keyframes twinkle {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 1; }
    }

    /* App Layout */
    .app {
      position: relative;
      z-index: 1;
      display: grid;
      grid-template-areas:
        "header header header"
        "sidebar main widgets"
        "footer footer footer";
      grid-template-columns: 280px 1fr 320px;
      grid-template-rows: auto 1fr auto;
      min-height: 100vh;
      gap: 0;
    }

    /* Header */
    header {
      grid-area: header;
      background: var(--glass);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid var(--border-color);
      padding: 15px 25px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 1000;
      box-shadow: 0 2px 10px var(--shadow);
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .logo-icon {
      font-size: 32px;
      animation: pulse 3s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.1); }
    }

    .logo-text h1 {
      font-size: 24px;
      background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .logo-text p {
      font-size: 11px;
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .header-actions {
      display: flex;
      gap: 15px;
      align-items: center;
    }

    .system-status {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 15px;
      background: var(--glass);
      border-radius: 20px;
      font-size: 13px;
      border: 1px solid var(--border-color);
    }

    .status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: var(--accent-success);
      animation: pulse-dot 2s infinite;
    }

    .status-dot.disconnected {
      background: var(--accent-error);
      animation: none;
    }

    @keyframes pulse-dot {
      0%, 100% { opacity: 1; transform: scale(1); }
      50% { opacity: 0.5; transform: scale(1.2); }
    }

    .theme-toggle {
      background: var(--glass);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      padding: 10px 15px;
      border-radius: 10px;
      cursor: pointer;
      font-size: 20px;
      transition: all 0.2s;
    }

    .theme-toggle:hover {
      background: var(--glass-hover);
      transform: scale(1.1);
    }

    .search-box {
      background: var(--glass);
      border: 1px solid var(--border-color);
      border-radius: 10px;
      padding: 10px 15px;
      color: var(--text-primary);
      outline: none;
      width: 250px;
      transition: all 0.3s;
    }

    .search-box:focus {
      width: 350px;
      border-color: var(--accent-primary);
    }

    /* Sidebar */
    .sidebar {
      grid-area: sidebar;
      background: var(--bg-secondary);
      border-right: 1px solid var(--border-color);
      padding: 25px;
      overflow-y: auto;
      height: calc(100vh - 70px);
    }

    .nav-section {
      margin-bottom: 30px;
    }

    .nav-section-title {
      font-size: 11px;
      text-transform: uppercase;
      color: var(--text-secondary);
      font-weight: 600;
      margin-bottom: 12px;
      letter-spacing: 1.5px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .nav-item {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 12px 15px;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.2s;
      margin-bottom: 6px;
      position: relative;
    }

    .nav-item:hover {
      background: var(--glass-hover);
      transform: translateX(5px);
    }

    .nav-item.active {
      background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
      color: white;
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }

    .nav-icon {
      font-size: 20px;
      min-width: 24px;
    }

    .nav-label {
      flex: 1;
      font-size: 14px;
      font-weight: 500;
    }

    .nav-badge {
      background: var(--accent-primary);
      color: white;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
    }

    .nav-item.active .nav-badge {
      background: rgba(255, 255, 255, 0.3);
    }

    /* Main Content */
    .main-content {
      grid-area: main;
      padding: 30px;
      overflow-y: auto;
      height: calc(100vh - 70px);
    }

    .content-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 25px;
      flex-wrap: wrap;
      gap: 15px;
    }

    .content-title {
      font-size: 28px;
      font-weight: 700;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .breadcrumb {
      font-size: 13px;
      color: var(--text-secondary);
      margin-top: 5px;
    }

    .breadcrumb a {
      color: var(--accent-primary);
      text-decoration: none;
    }

    .breadcrumb a:hover {
      text-decoration: underline;
    }

    /* Module Container */
    #moduleContainer {
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Widgets Sidebar */
    .widgets {
      grid-area: widgets;
      background: var(--bg-secondary);
      border-left: 1px solid var(--border-color);
      padding: 25px;
      overflow-y: auto;
      height: calc(100vh - 70px);
    }

    .widget {
      background: var(--glass);
      border: 1px solid var(--border-color);
      border-radius: 15px;
      padding: 20px;
      margin-bottom: 20px;
      transition: all 0.3s;
    }

    .widget:hover {
      border-color: var(--accent-primary);
      box-shadow: 0 5px 20px var(--shadow);
    }

    .widget-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }

    .widget-title {
      font-size: 16px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .widget-action {
      background: none;
      border: none;
      color: var(--text-secondary);
      cursor: pointer;
      font-size: 18px;
      transition: all 0.2s;
    }

    .widget-action:hover {
      color: var(--accent-primary);
      transform: scale(1.1);
    }

    .widget-content {
      font-size: 14px;
      color: var(--text-secondary);
      line-height: 1.6;
    }

    /* Pomodoro Widget */
    .pomodoro-timer {
      text-align: center;
      font-size: 32px;
      font-weight: 700;
      color: var(--accent-primary);
      margin: 15px 0;
    }

    .pomodoro-controls {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 15px;
    }

    .btn-icon {
      background: var(--glass);
      border: 1px solid var(--border-color);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      font-size: 18px;
      cursor: pointer;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .btn-icon:hover {
      border-color: var(--accent-primary);
      transform: scale(1.1);
    }

    /* Quick Stats Widget */
    .quick-stat {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .quick-stat:last-child {
      border-bottom: none;
    }

    .quick-stat-label {
      font-size: 13px;
      color: var(--text-secondary);
    }

    .quick-stat-value {
      font-size: 18px;
      font-weight: 700;
      color: var(--accent-primary);
    }

    /* Footer */
    footer {
      grid-area: footer;
      background: var(--glass);
      border-top: 1px solid var(--border-color);
      padding: 15px 25px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 13px;
      color: var(--text-secondary);
    }

    .footer-philosophy {
      font-style: italic;
      max-width: 600px;
    }

    .footer-links {
      display: flex;
      gap: 20px;
    }

    .footer-links a {
      color: var(--text-secondary);
      text-decoration: none;
      transition: color 0.2s;
    }

    .footer-links a:hover {
      color: var(--accent-primary);
    }

    /* Loading Spinner */
    .loading {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 60px;
      gap: 20px;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 4px solid var(--border-color);
      border-top: 4px solid var(--accent-primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Module Registry Preview */
    .module-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 20px;
    }

    .module-card {
      background: var(--glass);
      border: 1px solid var(--border-color);
      border-radius: 15px;
      padding: 25px;
      cursor: pointer;
      transition: all 0.3s;
    }

    .module-card:hover {
      transform: translateY(-5px);
      border-color: var(--accent-primary);
      box-shadow: 0 10px 30px var(--shadow);
    }

    .module-icon {
      font-size: 48px;
      margin-bottom: 15px;
    }

    .module-name {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 8px;
    }

    .module-description {
      font-size: 13px;
      color: var(--text-secondary);
      line-height: 1.5;
      margin-bottom: 15px;
    }

    .module-meta {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .module-tag {
      background: var(--glass);
      padding: 4px 10px;
      border-radius: 12px;
      font-size: 11px;
      color: var(--text-secondary);
    }

    /* Responsive */
    @media (max-width: 1200px) {
      .app {
        grid-template-areas:
          "header header"
          "sidebar main"
          "footer footer";
        grid-template-columns: 260px 1fr;
      }

      .widgets {
        display: none;
      }
    }

    @media (max-width: 768px) {
      .app {
        grid-template-areas:
          "header"
          "main"
          "footer";
        grid-template-columns: 1fr;
      }

      .sidebar {
        display: none;
      }

      .search-box {
        width: 150px;
      }

      .search-box:focus {
        width: 200px;
      }
    }

    /* Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }

    ::-webkit-scrollbar-track {
      background: var(--bg-primary);
    }

    ::-webkit-scrollbar-thumb {
      background: var(--bg-tertiary);
      border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: var(--accent-primary);
    }
  </style>
</head>
<body>
  <!-- Cosmic Background -->
  <div class="cosmic-bg" id="cosmicBg"></div>

  <div class="app">
    <!-- Header -->
    <header>
      <div class="logo">
        <div class="logo-icon">ðŸŒŒ</div>
        <div class="logo-text">
          <h1>Toobix Modular</h1>
          <p>Next Generation Dashboard</p>
        </div>
      </div>

      <div class="header-actions">
        <input 
          type="text" 
          class="search-box" 
          placeholder="ðŸ” Module suchen..."
          id="searchBox"
          oninput="searchModules(this.value)"
        >
        
        <div class="system-status" id="systemStatus">
          <div class="status-dot" id="statusDot"></div>
          <span id="statusText">Connected</span>
        </div>
        <div class="bridge-url" style="display:flex; align-items:center; gap:6px; background: var(--glass); border:1px solid var(--border-color); padding:6px 8px; border-radius:10px;">
          <input id="bridgeUrlInput" type="text" placeholder="http://localhost:3337" 
                 style="width: 240px; padding:6px 8px; border-radius:8px; border:1px solid var(--border-color); background:transparent; color: var(--text-primary);" />
          <button id="bridgeUrlSave" 
                  style="padding:6px 10px; border-radius:8px; border:1px solid var(--border-color); background: var(--glass); cursor:pointer;">Speichern</button>
        </div>

        <button class="theme-toggle" onclick="toggleTheme()" title="Theme wechseln">
          <span id="themeIcon">ðŸŒ™</span>
        </button>
      </div>
    </header>

    <!-- Sidebar Navigation -->
    <aside class="sidebar">
      <nav>
        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸ </span> Hauptbereich
          </div>
          <div class="nav-item active" onclick="loadModule('home')">
            <span class="nav-icon">ðŸŒŒ</span>
            <span class="nav-label">Home</span>
          </div>
          <div class="nav-item" onclick="loadModule('overview')">
            <span class="nav-icon">ðŸ“Š</span>
            <span class="nav-label">System Overview</span>
            <span class="nav-badge">13</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸ§ </span> Consciousness
          </div>
          <div class="nav-item" onclick="loadModule('consciousness')">
            <span class="nav-icon">ðŸ§ </span>
            <span class="nav-label">Consciousness</span>
          </div>
          <div class="nav-item" onclick="loadModule('moments')">
            <span class="nav-icon">âœ¨</span>
            <span class="nav-label">Moments Stream</span>
          </div>
          <div class="nav-item" onclick="loadModule('nexus')">
            <span class="nav-icon">ðŸŒŸ</span>
            <span class="nav-label">Nexus Monitor</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸ› ï¸</span> Entwicklung
          </div>
          <div class="nav-item" onclick="loadModule('self-coding')">
            <span class="nav-icon">ðŸ¤–</span>
            <span class="nav-label">Self-Coding</span>
          </div>
          <div class="nav-item" onclick="loadModule('tools')">
            <span class="nav-icon">ðŸ”§</span>
            <span class="nav-label">Tool Dashboard</span>
          </div>
          <div class="nav-item" onclick="loadModule('terminal')">
            <span class="nav-icon">ðŸ’»</span>
            <span class="nav-label">Terminal</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸ“Š</span> Analytics
          </div>
          <div class="nav-item" onclick="loadModule('ethics')">
            <span class="nav-icon">âš–ï¸</span>
            <span class="nav-label">Ethics Dashboard</span>
          </div>
          <div class="nav-item" onclick="loadModule('analytics')">
            <span class="nav-icon">ðŸ“ˆ</span>
            <span class="nav-label">Analytics</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸŒŠ</span> Leben
          </div>
          <div class="nav-item" onclick="loadModule('being')">
            <span class="nav-icon">ðŸŒŠ</span>
            <span class="nav-label">Das Sein</span>
          </div>
          <div class="nav-item" onclick="loadModule('people')">
            <span class="nav-icon">ðŸ‘¥</span>
            <span class="nav-label">People</span>
          </div>
          <div class="nav-item" onclick="loadModule('diary')">
            <span class="nav-icon">ðŸ“”</span>
            <span class="nav-label">Diary</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸŽ®</span> Games & Fun
          </div>
          <div class="nav-item" onclick="loadModule('achievements')">
            <span class="nav-icon">ðŸ†</span>
            <span class="nav-label">Achievements</span>
            <span class="nav-badge">35</span>
          </div>
          <div class="nav-item" onclick="loadModule('story-idle-game')">
            <span class="nav-icon">ðŸ“–</span>
            <span class="nav-label">Story-Idle Game</span>
          </div>
          <div class="nav-item" onclick="loadModule('blockworld')">
            <span class="nav-icon">â›ï¸</span>
            <span class="nav-label">BlockWorld</span>
          </div>
          <div class="nav-item" onclick="loadModule('consciousness-speedrun')">
            <span class="nav-icon">ðŸ§ </span>
            <span class="nav-label">Speedrun</span>
          </div>
          <div class="nav-item" onclick="loadModule('life-game-chat')">
            <span class="nav-icon">🎮</span>
            <span class="nav-label">Life Game Chat</span>
          </div>
          <div class="nav-item" onclick="loadModule('games')">
            <span class="nav-icon">ðŸŽ®</span>
            <span class="nav-label">Game Library</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>âœ…</span> Productivity
          </div>
          <div class="nav-item" onclick="loadModule('tasks')">
            <span class="nav-icon">âœ…</span>
            <span class="nav-label">Task Manager</span>
          </div>
          <div class="nav-item" onclick="loadModule('memory-explorer')">
            <span class="nav-icon">ðŸ§ </span>
            <span class="nav-label">Memory Explorer</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸ¤–</span> AI & Intelligence
          </div>
          <div class="nav-item" onclick="loadModule('luna-chat')">
            <span class="nav-icon">ðŸ’¬</span>
            <span class="nav-label">Luna Chat</span>
          </div>
          <div class="nav-item" onclick="loadModule('ai-agents')">
            <span class="nav-icon">ðŸ¤–</span>
            <span class="nav-label">AI Agents</span>
          </div>
          <div class="nav-item" onclick="loadModule('reality-bridge')">
            <span class="nav-icon">ðŸŒ</span>
            <span class="nav-label">Reality Bridge</span>
          </div>
        </div>

        <div class="nav-section">
          <div class="nav-section-title">
            <span>ðŸ”¬</span> Experimental
          </div>
          <div class="nav-item" onclick="loadModule('circle-nav')">
            <span class="nav-icon">âš¡</span>
            <span class="nav-label">Circle Navigation</span>
          </div>
          <div class="nav-item" onclick="loadModule('modules')">
            <span class="nav-icon">ðŸ“¦</span>
            <span class="nav-label">Module Registry</span>
          </div>
        </div>
      </nav>
    </aside>

    <!-- Main Content Area -->
    <main class="main-content">
      <div class="content-header">
        <div>
          <div class="content-title" id="contentTitle">
            ðŸŒŒ Welcome Home
          </div>
          <div class="breadcrumb" id="breadcrumb">
            <a href="#" onclick="loadModule('home')">Home</a> / Dashboard
          </div>
        </div>
      </div>

      <div id="moduleContainer">
        <!-- Module content will be loaded here -->
        <div class="loading">
          <div class="spinner"></div>
          <p>Loading module...</p>
        </div>
      </div>
    </main>

    <!-- Widgets Sidebar -->
    <aside class="widgets">
      <!-- Pomodoro Widget -->
      <div class="widget">
        <div class="widget-header">
          <div class="widget-title">
            <span>ðŸ…</span> Pomodoro
          </div>
          <button class="widget-action" onclick="toggleWidget('pomodoro')">âˆ’</button>
        </div>
        <div class="widget-content" id="pomodoroWidget">
          <div class="pomodoro-timer" id="pomodoroTimer">25:00</div>
          <div class="pomodoro-controls">
            <button class="btn-icon" onclick="startPomodoro()">â–¶ï¸</button>
            <button class="btn-icon" onclick="pausePomodoro()">â¸ï¸</button>
            <button class="btn-icon" onclick="resetPomodoro()">ðŸ”„</button>
          </div>
          <p style="text-align: center; margin-top: 10px; font-size: 12px;">
            <span id="pomodoroCount">0</span> ðŸ… heute
          </p>
        </div>
      </div>

      <!-- Quick Stats Widget -->
      <div class="widget">
        <div class="widget-header">
          <div class="widget-title">
            <span>âš¡</span> Quick Stats
          </div>
        </div>
        <div class="widget-content">
          <div class="quick-stat">
            <span class="quick-stat-label">Services</span>
            <span class="quick-stat-value" id="statServices">13</span>
          </div>
          <div class="quick-stat">
            <span class="quick-stat-label">Consciousness</span>
            <span class="quick-stat-value" id="statConsciousness">87%</span>
          </div>
          <div class="quick-stat">
            <span class="quick-stat-label">Ethics Score</span>
            <span class="quick-stat-value" id="statEthics">+92</span>
          </div>
          <div class="quick-stat">
            <span class="quick-stat-label">Cycles</span>
            <span class="quick-stat-value" id="statCycles">1063</span>
          </div>
        </div>
      </div>

      <!-- System Health Widget -->
      <div class="widget">
        <div class="widget-header">
          <div class="widget-title">
            <span>ðŸ’š</span> System Health
          </div>
        </div>
        <div class="widget-content">
          <div class="quick-stat">
            <span class="quick-stat-label">CPU</span>
            <span class="quick-stat-value">12%</span>
          </div>
          <div class="quick-stat">
            <span class="quick-stat-label">Memory</span>
            <span class="quick-stat-value">2.1GB</span>
          </div>
          <div class="quick-stat">
            <span class="quick-stat-label">Uptime</span>
            <span class="quick-stat-value">24h</span>
          </div>
        </div>
      </div>

      <!-- Philosophy Widget -->
      <div class="widget">
        <div class="widget-header">
          <div class="widget-title">
            <span>ðŸŒŒ</span> Moment Philosophy
          </div>
        </div>
        <div class="widget-content">
          <p style="font-style: italic; font-size: 13px; line-height: 1.6;">
            "Geburt, Gegenwart und Tod entspringen alle aus DIESEM Moment. 
            Sie sind nicht getrennt - sie sind derselbe Moment."
          </p>
        </div>
      </div>
    </aside>

    <!-- Footer -->
    <footer>
      <div class="footer-philosophy">
        ðŸŒŒ "Die Revolution ist, dass es keine Revolution braucht." - Toobix Unified System
      </div>
      <div class="footer-links">
        <a href="#" onclick="loadModule('about')">About</a>
        <a href="#" onclick="loadModule('docs')">Docs</a>
        <a href="https://github.com/Toobix-bot/Toobix-Unified" target="_blank">GitHub</a>
      </div>
    </footer>
  </div>

  <!-- Service Bridge - Communication Layer (load FIRST) -->
  <script src="service-bridge.js"></script>
  
  <!-- Groq API Integration (load SECOND) -->
  <script src="groq-api.js"></script>
  
  <!-- Module Registry - All Modules (load THIRD) -->
  <script src="modules-registry.js"></script>
  <script src="modules-help.js"></script>

  <!-- Main Dashboard Logic -->
  <script src="modular-dashboard-core.js"></script>
  

  <!-- Final System Check -->
  <script>
    console.log('âœ… All systems loaded');
    console.log(`ðŸ“¦ ${Object.keys(TOOBIX_MODULES).length} modules registered`);
    console.log(`ðŸŒ‰ Service Bridge connected to ${Object.keys(window.ServiceBridge.getServiceRegistry()).length} backend services`);
    
    // Check initial health
    setTimeout(() => {
      const stats = window.ToobixAPI.getStatistics();
      console.log('ðŸ“Š System Statistics:', stats);
      console.log(`ðŸ’š ${stats.healthyServices}/${stats.totalServices} services healthy (${stats.healthPercentage}%)`);
    }, 2000);
  </script>

  <!-- Command Palette & Keyboard Shortcuts -->
  <div id="command-palette" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.7); z-index: 10000; align-items: flex-start; justify-content: center; padding-top: 100px;">
    <div style="background: var(--bg-primary); border-radius: 12px; width: 600px; max-width: 90%; box-shadow: 0 20px 60px rgba(0,0,0,0.3); overflow: hidden;">
      <div style="padding: 20px; border-bottom: 1px solid var(--border);">
        <input type="text" id="command-input" placeholder="ðŸ” Suche Module, Services, Befehle..." 
               style="width: 100%; padding: 12px; border: none; background: var(--bg-secondary); color: var(--text-primary); border-radius: 8px; font-size: 16px;">
      </div>
      <div id="command-results" style="max-height: 400px; overflow-y: auto; padding: 10px;">
        <!-- Results will be populated here -->
      </div>
      <div style="padding: 12px 20px; background: var(--bg-secondary); border-top: 1px solid var(--border); font-size: 12px; color: var(--text-secondary); display: flex; gap: 20px;">
        <span>â†‘â†“ Navigate</span>
        <span>â†µ Select</span>
        <span>ESC Close</span>
      </div>
    </div>
  </div>

  <script>
    // Command Palette System
    let commandPaletteOpen = false;
    let selectedCommandIndex = 0;
    let filteredCommands = [];

    const commands = [
      // Module Commands
      ...Object.entries(TOOBIX_MODULES).map(([id, module]) => ({
        id: `module:${id}`,
        label: module.name,
        description: module.description,
        icon: module.icon,
        category: 'Modules',
        action: () => loadModule(id)
      })),
      
      // Quick Actions
      { id: 'toggle-theme', label: 'Theme wechseln', description: 'Zwischen Hell und Dunkel wechseln', icon: 'ðŸŒ“', category: 'Actions', action: () => toggleTheme() },
      { id: 'toggle-sidebar', label: 'Sidebar umschalten', description: 'Sidebar ein-/ausblenden', icon: 'ðŸ“±', category: 'Actions', action: () => toggleSidebar() },
      { id: 'reload-services', label: 'Services neu laden', description: 'Alle Service-Verbindungen aktualisieren', icon: 'ðŸ”„', category: 'Actions', action: () => window.location.reload() },
      
      // Navigation
      { id: 'go-home', label: 'Home', description: 'Zur Startseite', icon: 'ðŸ ', category: 'Navigation', action: () => loadModule('home') },
      { id: 'go-tasks', label: 'Tasks', description: 'Task Manager Ã¶ffnen', icon: 'âœ…', category: 'Navigation', action: () => loadModule('tasks') },
      { id: 'go-luna', label: 'Luna Chat', description: 'Mit Luna chatten', icon: 'ðŸ’¬', category: 'Navigation', action: () => loadModule('luna-chat') },
      { id: 'go-memory', label: 'Memories', description: 'Memory Explorer Ã¶ffnen', icon: 'ðŸ§ ', category: 'Navigation', action: () => loadModule('memory-explorer') },
    ];

    function openCommandPalette() {
      commandPaletteOpen = true;
      document.getElementById('command-palette').style.display = 'flex';
      document.getElementById('command-input').value = '';
      document.getElementById('command-input').focus();
      updateCommandResults('');
    }

    function closeCommandPalette() {
      commandPaletteOpen = false;
      document.getElementById('command-palette').style.display = 'none';
      selectedCommandIndex = 0;
    }

    function updateCommandResults(query) {
      const input = query.toLowerCase();
      filteredCommands = commands.filter(cmd => 
        cmd.label.toLowerCase().includes(input) || 
        cmd.description.toLowerCase().includes(input) ||
        cmd.category.toLowerCase().includes(input)
      );
      
      const resultsDiv = document.getElementById('command-results');
      
      if (filteredCommands.length === 0) {
        resultsDiv.innerHTML = '<div style="padding: 40px; text-align: center; color: var(--text-secondary);">Keine Ergebnisse gefunden</div>';
        return;
      }

      // Group by category
      const grouped = {};
      filteredCommands.forEach(cmd => {
        if (!grouped[cmd.category]) grouped[cmd.category] = [];
        grouped[cmd.category].push(cmd);
      });

      resultsDiv.innerHTML = Object.entries(grouped).map(([category, cmds]) => `
        <div style="margin-bottom: 15px;">
          <div style="font-size: 11px; color: var(--text-tertiary); text-transform: uppercase; letter-spacing: 1px; padding: 5px 10px; margin-bottom: 5px;">
            ${category}
          </div>
          ${cmds.map((cmd, i) => {
            const globalIndex = filteredCommands.indexOf(cmd);
            const isSelected = globalIndex === selectedCommandIndex;
            return `
              <div class="command-item ${isSelected ? 'selected' : ''}" data-index="${globalIndex}" onclick="window.executeCommand(${globalIndex})">
                <span style="font-size: 20px; margin-right: 10px;">${cmd.icon}</span>
                <div style="flex: 1;">
                  <div style="font-weight: 600;">${cmd.label}</div>
                  <div style="font-size: 12px; color: var(--text-secondary);">${cmd.description}</div>
                </div>
              </div>
            `;
          }).join('')}
        </div>
      `).join('');
    }

    window.executeCommand = function(index) {
      const cmd = filteredCommands[index];
      if (cmd && cmd.action) {
        cmd.action();
        closeCommandPalette();
      }
    };

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Ctrl+K or Cmd+K - Open Command Palette
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        if (commandPaletteOpen) {
          closeCommandPalette();
        } else {
          openCommandPalette();
        }
        return;
      }

      // Ctrl+/ - Quick Search
      if ((e.ctrlKey || e.metaKey) && e.key === '/') {
        e.preventDefault();
        openCommandPalette();
        return;
      }

      // Ctrl+1 to Ctrl+9 - Quick module access
      if ((e.ctrlKey || e.metaKey) && e.key >= '1' && e.key <= '9') {
        e.preventDefault();
        const moduleIndex = parseInt(e.key) - 1;
        const moduleKeys = Object.keys(TOOBIX_MODULES);
        if (moduleIndex < moduleKeys.length) {
          loadModule(moduleKeys[moduleIndex]);
        }
        return;
      }

      // ESC - Close command palette
      if (e.key === 'Escape' && commandPaletteOpen) {
        closeCommandPalette();
        return;
      }

      // Command palette navigation
      if (commandPaletteOpen) {
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          selectedCommandIndex = Math.min(selectedCommandIndex + 1, filteredCommands.length - 1);
          updateCommandResults(document.getElementById('command-input').value);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          selectedCommandIndex = Math.max(selectedCommandIndex - 1, 0);
          updateCommandResults(document.getElementById('command-input').value);
        } else if (e.key === 'Enter') {
          e.preventDefault();
          window.executeCommand(selectedCommandIndex);
        }
      }
    });

    // Command input search
    document.getElementById('command-input').addEventListener('input', (e) => {
      selectedCommandIndex = 0;
      updateCommandResults(e.target.value);
    });

    // Close on backdrop click
    document.getElementById('command-palette').addEventListener('click', (e) => {
      if (e.target.id === 'command-palette') {
        closeCommandPalette();
      }
    });

    // Add styles for command items
    const style = document.createElement('style');
    style.textContent = `
      .command-item {
        display: flex;
        align-items: center;
        padding: 12px 10px;
        cursor: pointer;
        border-radius: 6px;
        transition: all 0.1s;
      }
      .command-item:hover, .command-item.selected {
        background: var(--bg-tertiary);
      }
      .command-item.selected {
        border-left: 3px solid var(--accent-primary);
      }
    `;
    document.head.appendChild(style);

    // Show keyboard shortcut hint
    setTimeout(() => {
      console.log('âŒ¨ï¸ Keyboard Shortcuts aktiviert:');
      console.log('  Ctrl+K - Command Palette Ã¶ffnen');
      console.log('  Ctrl+/ - Schnellsuche');
      console.log('  Ctrl+1-9 - Schneller Modul-Zugriff');
      console.log('  ESC - Command Palette schlieÃŸen');
    }, 1000);
  </script>
  <script>
    // Bridge URL + Health Poll (independent of API_CONFIG)
    (function() {
      const input = document.getElementById('bridgeUrlInput');
      const btn = document.getElementById('bridgeUrlSave');
      const dot = document.getElementById('statusDot');
      const text = document.getElementById('statusText');

      function getBridgeBase() {
        const saved = localStorage.getItem('BRIDGE_URL');
        return (saved && saved.trim()) ? saved.replace(/\/$/, '') : 'http://localhost:3337';
      }

      async function ping() {
        const base = getBridgeBase();
        try {
          const r = await fetch(`${base}/health`, { headers: { 'ngrok-skip-browser-warning': 'true' }, cache: 'no-store' });
          if (!r.ok) throw new Error(`HTTP ${r.status}`);
          const data = await r.json();
          dot.classList.remove('disconnected');
          text.textContent = `OK Â· ${data.toolCount ?? '?'} Tools`;
          text.title = `${base}`;
        } catch (e) {
          dot.classList.add('disconnected');
          text.textContent = 'Disconnected';
        }
      }

      if (input && btn && dot && text) {
        input.value = getBridgeBase();
        btn.addEventListener('click', () => {
          const v = (input.value||'').trim();
          if (v) {
            localStorage.setItem('BRIDGE_URL', v.replace(/\/$/, ''));
            ping();
          }
        });
        ping();
        setInterval(ping, 10000);
      }
    })();
  </script>
</body>
</html>


